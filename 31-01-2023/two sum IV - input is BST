Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

Example 1:

Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> list = new ArrayList<>();
    public boolean findTarget(TreeNode root, int k) {
        ArrayList<Integer> list1= inorder(root,k);
        for(int i=0; i<list1.size()-1;i++){
            for(int j=i+1;j<list1.size();j++){
                if(list1.get(i)+list1.get(j)==k){
                    return true;
                }
            }
        }
        return false;
    }
    public ArrayList<Integer> inorder(TreeNode root, int k){
        if(root==null){
            return list;
        }
        inorder(root.left, k);
        list.add(root.val);
        inorder(root.right,k);
        return list;
    }
}
