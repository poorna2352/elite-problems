
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.
program:
class Solution {
    public int orangesRotting(int[][] grid) {
        int rows=grid.length;
        int cols=grid[0].length;
        Queue<pair> q=new LinkedList<>();
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.add(new pair(i,j));
                }
            }
        }
        int time=0;
        int[] offsetr={-1,0,1,0};
        int[] offsetc={0,1,0,-1};
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=1;i<=size;i++){
                pair curr=q.poll();
                int r=curr.row;
                int c=curr.col;
                for(int j=0;j<4;j++){
                    int nextr=r+offsetr[j];
                    int nextc=c+offsetc[j];
                    if(nextr<0 || nextr>rows-1 || nextc<0 || nextc>cols-1){
                        continue;
                    }
                    if(grid[nextr][nextc]==1){
                        q.add(new pair(nextr,nextc));
                        grid[nextr][nextc]=2;
                    }
                }
            }
            time++;
        }
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return time>0?time-1:0;
    }
    class pair{
        int row,col,val;
        pair(int row,int col){
            this.row=row;
            this.col=col;
            val=2;
        }
    }
}
