A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B

Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.
Example 2:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.


class Solution {
    public boolean isBipartite(int[][] graph) {
        int[] color =new int[graph.length];
        for(int i=0;i<graph.length;i++){
            if(color[i]==0&&!isValid(graph,color,1,i)) return false;
        }
        return true;
    }
    public boolean isValid(int[][] graph,int[] color,int c,int node){
        if(color[node]!=0){
            return color[node]==c;
        }
        color[node]=c;
        for(int neigh: graph[node]){
            if(!isValid(graph,color,-c,neigh)) return false;
        }
        return true;
    }
}
