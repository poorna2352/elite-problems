class Solution {
    public int numIslands(char[][] grid) {
        int rows=grid.length;
        int cols=grid[0].length;
        int[][] vis=new int[rows][cols];
        int c=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(vis[i][j]==0&&grid[i][j]=='1'){
                    c++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return c;
    }
    public void bfs(int row,int col,int[][] vis,char[][] grid){
        vis[row][col]=1;
        Queue<pair> q=new LinkedList<>();
        q.add(new pair(row,col));
        int rows=grid.length;
        int cols=grid[0].length;
        int[] offsetr={-1,0,1,0};
        int[] offsetc={0,1,0,-1};
        while(!q.isEmpty()){
            pair curr=q.poll();
            int r=curr.row;
            int c=curr.col;
            for(int i=0;i<4;i++){
                int nextr=r+offsetr[i];
                int nextc=c+offsetc[i];
                if(nextr<0||nextr>rows-1||nextc<0||nextc>cols-1) continue;
                if(vis[nextr][nextc]==0&&grid[nextr][nextc]=='1'){
                    vis[nextr][nextc]=1;
                    q.add(new pair(nextr,nextc));
                }
            }
        }
    }
    class pair{
        int row,col;
        pair(int row,int col){
            this.row=row;
            this.col=col;
        }
    }
}
