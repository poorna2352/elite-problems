class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n=isConnected.length;
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1&&i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int c=0;
        boolean[] visited =new boolean[n];
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(adj,visited,i);
                c++;
            }
        }
        return c;
    }
    public void dfs(List<List<Integer>> adj,boolean[] visited,int source){
        visited[source]=true;
        for(int neigh: adj.get(source)){
            if(!visited[neigh]){
                dfs(adj,visited,neigh);
            }
        }
    }
}
