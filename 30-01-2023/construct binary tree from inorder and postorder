Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree,
construct and return the binary tree.

Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer>map = new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i], i);
        }
        TreeNode node = constructBT(inorder, 0, inorder.length-1, postorder,0, postorder.length-1, map);
        return node;
    }
    public TreeNode constructBT(int[] in, int inStart, int inEnd, int[] post, int postStart, int postEnd, HashMap<Integer, Integer> map){
        if(inStart>inEnd || postStart>postEnd){
            return null;
        }
        TreeNode root = new TreeNode(post[postEnd]);
        int ind = map.get(root.val);
        int len = ind-inStart;
        root.left= constructBT(in,inStart, ind-1, post, postStart,postStart+len-1, map );
        root.right=constructBT(in, ind+1, inEnd, post, postStart+len, postEnd-1,map);
        return root;
    }
