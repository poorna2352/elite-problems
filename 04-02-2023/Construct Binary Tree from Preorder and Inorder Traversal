/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return buildTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,map);
    }
    public TreeNode buildTree(int[] preorder,int pstart,int pend,int[] inorder,int istart,int iend,HashMap<Integer,Integer>map){
        if(pstart>pend||istart>iend) return null;
        TreeNode root=new TreeNode(preorder[pstart]);
        int inroot=map.get(root.val);
        int numsleft=inroot-istart;
        root.left=buildTree(preorder,pstart+1,pstart+numsleft,inorder,istart,inroot-1,map);
        root.right=buildTree(preorder,pstart+numsleft+1,pend,inorder,inroot+1,iend,map);
        return root;
    }
}
