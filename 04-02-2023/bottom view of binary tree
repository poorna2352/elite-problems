
class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        Queue<pair> q=new LinkedList<>();
        TreeMap<Integer,Integer> map=new TreeMap<>();
        q.add(new pair(0,root));
        while(!q.isEmpty()){
            pair curr=q.poll();
            map.put(curr.hd,curr.node.data);
            if(curr.node.left!=null){
                q.add(new pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right!=null){
                q.add(new pair(curr.hd+1,curr.node.right));
            }
        }
        ArrayList<Integer> l=new ArrayList<>();
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            l.add(entry.getValue());
        }
        return l;
    }
    static class pair{
        int hd;
        Node node;
        public pair(int hd,Node node){
            this.hd=hd;
            this.node=node;
        }
    }
}
